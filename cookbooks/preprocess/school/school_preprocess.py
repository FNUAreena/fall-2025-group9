# -*- coding: utf-8 -*-
"""School Preprocess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lc2BGuXfUFTGv5zGnRkZEgvTQH_CMnSE
"""

# ============================================
# Schools XLSX/XLS -> CSV (clean + standardize)
# Output: .../preprocess/school-processing/preprocessed-data/schools preprocess.csv
# ============================================

# 0) deps
try:
    import pandas  # noqa
except Exception:
    import sys, subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "pandas"])
# Engines for Excel
try:
    import openpyxl  # for .xlsx
except Exception:
    import sys, subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "openpyxl"])
try:
    import xlrd  # for legacy .xls
except Exception:
    import sys, subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "xlrd==1.2.0"])

# 1) mount Drive
IN_COLAB = False
try:
    from google.colab import drive  # type: ignore
    drive.mount('/content/drive'); IN_COLAB = True
except Exception:
    pass

import os, re

# --- paths (from your Drive screenshot) ---
IN_XLSX = "/content/drive/MyDrive/Capstone Project/Data/FCPS Schools list.xlsx"
OUT_DIR = "/content/drive/MyDrive/Capstone Project/Data/preprocess/school-processing/preprocessed-data"
OUT_CSV = f"{OUT_DIR}/schools preprocess.csv"
os.makedirs(OUT_DIR, exist_ok=True)

# --- read & preserve School ID formatting ---
def _fix_code(x):
    # keep leading zeros; strip .0; keep only digits
    if x is None or (isinstance(x, float) and np.isnan(x)): return ""
    s = str(x).strip()
    s = re.sub(r"\.0$", "", s)     # 086.0 -> 086
    s = re.sub(r"[^\d]", "", s)    # remove stray chars
    if s == "": return ""
    # pad to at least 3 digits; if your IDs have more digits, this still preserves them
    return s if len(s) > 3 else s.zfill(3)

df = pd.read_excel(
    IN_XLSX,
    engine="openpyxl",
    dtype=str,
    converters={"School ID": _fix_code}  # preserves 086, 096, etc.
)

# --- normalize headers exactly as in your sheet ---
df.rename(columns={c: c.strip() for c in df.columns}, inplace=True)

rename_map = {
    "School Name": "School_Name",
    "School ID": "School_Code",
    "Distribution Kitchen (DK)": "Distribution_Kitchen",
    "FNS Area": "FNS_Area",
    "Level": "School_Level",
    "FCPS Region": "Region",
    "CEP Schools": "CEP"
}
for old, new in rename_map.items():
    if old in df.columns:
        df.rename(columns={old: new}, inplace=True)

# --- select the columns we need (some may be missing in older files) ---
keep = [c for c in [
    "School_Code","School_Name","Region","School_Level",
    "Distribution_Kitchen","FNS_Area","CEP","Enrollment"
] if c in df.columns]

out = df[keep].copy()

# --- clean values ---
if "School_Name" in out:
    out["School_Name"] = out["School_Name"].astype(str).str.strip()

if "School_Code" in out:
    out["School_Code"] = out["School_Code"].apply(_fix_code)

if "Region" in out:
    out["Region"] = out["Region"].astype(str).str.strip()
    # derive Region_Num (int) from strings like "Region 1"
    def _region_num(s):
        m = re.search(r"(\d+)", str(s))
        return int(m.group(1)) if m else np.nan
    out["Region_Num"] = out["Region"].apply(_region_num)

if "School_Level" in out:
    out["School_Level"] = out["School_Level"].str.upper().str.strip()  # ES/MS/HS

if "FNS_Area" in out:
    out["FNS_Area"] = pd.to_numeric(out["FNS_Area"], errors="coerce")

if "CEP" in out:
    # normalize to 0/1 (CEP, YES, Y -> 1)
    out["CEP"] = out["CEP"].astype(str).str.strip().str.upper()
    out["CEP"] = out["CEP"].isin(["CEP","YES","Y","1","TRUE"]).astype(int)

if "Enrollment" in out:
    out["Enrollment"] = pd.to_numeric(out["Enrollment"], errors="coerce").fillna(0).astype(int)

# drop exact dupes
out = out.drop_duplicates().reset_index(drop=True)

# --- save ---
out.to_csv(OUT_CSV, index=False)
print("Saved â†’", OUT_CSV)
print("\nPreview:")
print(out.head(12).to_string(index=False))

